---
description: Use this rule whenever you are creating or modifying UI components, layouts, or screens in the React Native CRM project. It provides mandatory guidelines for consistent use of React Native Paper components, Material Design 3 principles, spacing, typography, color, accessibility, theming, and code organization. Always reference this rule to ensure visual, functional, and structural consistency across the app.
globs: 
alwaysApply: false
---
# React Native CRM Design System Rules

## Overview
This design system ensures consistent, professional, and accessible UI patterns for our React Native CRM lead management application. All components must follow Material Design 3 principles using React Native Paper.

## 1. Core Components

### Required Component Usage
Always use React Native Paper components for consistency and Material Design compliance:

#### Data Display
```typescript
// ✅ Correct: Use List.Item for data rows
import { List } from 'react-native-paper';

function LeadCard({ lead, onPress }: { lead: Lead; onPress: () => void }) {
  return (
    <List.Item
      title={lead.name}
      description={lead.email}
      onPress={onPress}
      left={(props) => <List.Icon {...props} icon="account" />}
      right={(props) => <List.Icon {...props} icon="chevron-right" />}
    />
  );
}

// ❌ Incorrect: Don't create custom TouchableOpacity wrappers
```

#### Content Grouping
```typescript
// ✅ Correct: Use Card for content sections
import { Card } from 'react-native-paper';

<Card style={{ margin: 16 }}>
  <Card.Content>
    {/* Content here */}
  </Card.Content>
</Card>
```

#### Primary Actions
```typescript
// ✅ Correct: Use FAB for primary actions
import { FAB } from 'react-native-paper';

<FAB
  icon="plus"
  onPress={() => navigation.navigate('NewLead')}
  style={{ position: 'absolute', right: 24, bottom: 40 }}
/>
```

### Navigation Components
Reference [StickyHeader.tsx](mdc:components/StickyHeader.tsx) for proper header implementation:

```typescript
// ✅ Correct: Use Appbar components
import { Appbar } from 'react-native-paper';

<Appbar.Header>
  {canGoBack && <Appbar.BackAction onPress={goBack} />}
  <Appbar.Content title="Screen Title" />
  <Appbar.Action icon="menu" onPress={openMenu} />
</Appbar.Header>
```

## 2. Layout System

### Spacing Guidelines
Follow the 8pt grid system consistently:

```typescript
// ✅ Correct: Use multiples of 8
const styles = StyleSheet.create({
  container: {
    padding: 16, // 2 × 8
    margin: 24,  // 3 × 8
  },
  item: {
    marginBottom: 8, // 1 × 8
  },
});
```

### Safe Area Usage
Always use safe area context as shown in [StickyHeader.tsx](mdc:components/StickyHeader.tsx):

```typescript
import { useSafeAreaInsets } from 'react-native-safe-area-context';

const { top, bottom } = useSafeAreaInsets();
```

### Elevation System
Use Paper's elevation levels systematically:
- **Level 0**: Backgrounds
- **Level 1**: Cards and surfaces  
- **Level 2**: Dialogs and modals
- **Level 3**: Navigation components
- **Level 4**: FABs
- **Level 5**: Snackbars

Reference [theme.ts](mdc:themes/theme.ts) for proper elevation tokens.

## 3. Typography & Color

### Typography Scale
Use semantic typography from the theme as shown in [theme.ts](mdc:themes/theme.ts):

```typescript
import { useTheme } from 'react-native-paper';

const theme = useTheme();

// ✅ Correct: Use theme typography
<Text style={[theme.fonts.headlineMedium, { color: theme.colors.onSurface }]}>
  Screen Title
</Text>

<Text style={[theme.fonts.bodyMedium, { color: theme.colors.onSurfaceVariant }]}>
  Description text
</Text>
```

### Color Usage
Reference [theme.ts](mdc:themes/theme.ts) for color tokens:

```typescript
// ✅ Correct: Use semantic colors
const styles = StyleSheet.create({
  primaryButton: {
    backgroundColor: theme.colors.primary,
  },
  surface: {
    backgroundColor: theme.colors.surface,
  },
  text: {
    color: theme.colors.onSurface,
  },
});
```

## 4. Navigation Patterns

### Header Behaviors
Follow the pattern in [StickyHeader.tsx](mdc:components/StickyHeader.tsx) for scroll-responsive headers:

```typescript
// ✅ Correct: Progressive disclosure with blur effects
import ProgressiveBlurView from '@components/ProgressiveBlurView';

<Animated.View style={[animatedStyle]}>
  <ProgressiveBlurView
    tint={scheme === 'dark' ? 'dark' : 'light'}
    intensity={50}
  />
  <Appbar.Header style={{ backgroundColor: 'transparent' }}>
    {/* Header content */}
  </Appbar.Header>
</Animated.View>
```

### Screen Structure
Follow the pattern in [LeadListScreen.tsx](mdc:screens/LeadListScreen.tsx):

```typescript
// ✅ Correct: Screen layout pattern
return (
  <View style={{ flex: 1 }}>
    <StickyHeader scrollY={scrollY} renderRight={renderHeaderActions} />
    
    <Animated.FlatList
      data={data}
      renderItem={renderItem}
      ListHeaderComponent={<ScrollHeader scrollY={scrollY} />}
      onScroll={scrollHandler}
      scrollEventThrottle={16}
    />
    
    <FAB icon="plus" onPress={addAction} style={fabStyle} />
  </View>
);
```

## 5. Data Presentation

### Loading States
Follow the pattern in [LeadListScreen.tsx](mdc:screens/LeadListScreen.tsx):

```typescript
// ✅ Correct: Consistent loading states
import { ActivityIndicator } from 'react-native-paper';

if (isLoading) {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <ActivityIndicator size="large" />
      <Text style={{ marginTop: 16 }}>Loading leads...</Text>
    </View>
  );
}
```

### Error States
```typescript
// ✅ Correct: User-friendly error handling
if (isError) {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 24 }}>
      <Text style={[theme.fonts.titleMedium, { textAlign: 'center' }]}>
        Unable to load leads
      </Text>
      <Button mode="contained" onPress={retry} style={{ marginTop: 16 }}>
        Try Again
      </Button>
    </View>
  );
}
```

### Empty States
```typescript
// ✅ Correct: Actionable empty states
if (!data || data.length === 0) {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 24 }}>
      <Text style={[theme.fonts.titleMedium, { textAlign: 'center', marginBottom: 8 }]}>
        No leads found
      </Text>
      <Text style={[theme.fonts.bodyMedium, { textAlign: 'center', color: theme.colors.onSurfaceVariant }]}>
        Create your first lead to get started
      </Text>
      <FAB icon="plus" onPress={createLead} style={{ marginTop: 24 }} />
    </View>
  );
}
```

## 6. Performance Guidelines

### List Optimization
Use FlatList for large datasets as shown in [LeadListScreen.tsx](mdc:screens/LeadListScreen.tsx):

```typescript
// ✅ Correct: Optimized list rendering
<Animated.FlatList
  data={leads}
  keyExtractor={(item) => item.id.toString()}
  renderItem={({ item }) => <LeadCard lead={item} />}
  getItemLayout={(data, index) => ({ length: 72, offset: 72 * index, index })}
  removeClippedSubviews
  maxToRenderPerBatch={10}
  windowSize={10}
/>
```

### Animation Performance
Use Reanimated as shown in [StickyHeader.tsx](mdc:components/StickyHeader.tsx):

```typescript
// ✅ Correct: Performant animations
import { useSharedValue, useAnimatedStyle, interpolate } from 'react-native-reanimated';

const scrollY = useSharedValue(0);
const animatedStyle = useAnimatedStyle(() => ({
  opacity: interpolate(scrollY.value, [0, 100], [0, 1], 'clamp'),
}));
```

### Data Management
Use React Query patterns as shown in [api.ts](mdc:hooks/api.ts):

```typescript
// ✅ Correct: Efficient data fetching
import { useQuery } from '@tanstack/react-query';

export function useLeads() {
  return useQuery({
    queryKey: ['leads'],
    queryFn: fetchLeads,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
}
```

## 7. Accessibility Guidelines

### Touch Targets
Ensure minimum 44pt touch targets:

```typescript
// ✅ Correct: Accessible touch targets
<Pressable
  style={{
    minHeight: 44,
    minWidth: 44,
    justifyContent: 'center',
    alignItems: 'center',
  }}
  accessibilityRole="button"
  accessibilityLabel="Add new lead"
>
  <Icon name="plus" size={24} />
</Pressable>
```

### Screen Reader Support
Always provide accessibility labels:

```typescript
// ✅ Correct: Screen reader support
<List.Item
  title={lead.name}
  description={lead.email}
  accessibilityLabel={`Lead ${lead.name}, email ${lead.email}`}
  accessibilityHint="Tap to view lead details"
/>
```

## 8. Theme Integration

### Color Scheme Support
Follow the pattern in [App.tsx](mdc:App.tsx) for theme switching:

```typescript
import { useSelectedColorScheme } from '@hooks/useSelectedColorScheme';
import { lightTheme, darkTheme } from '@themes/theme';

const scheme = useSelectedColorScheme();
const theme = scheme === 'dark' ? darkTheme : lightTheme;
```

### Theme Context Usage
Always use theme context for colors and typography:

```typescript
// ✅ Correct: Use theme context
const theme = useTheme();

// ❌ Incorrect: Hardcoded colors
const badStyle = { color: '#000000' };

// ✅ Correct: Theme-aware colors
const goodStyle = { color: theme.colors.onSurface };
```

## Code Organization

### File Structure
Follow existing patterns:
- **Components**: Reusable UI components in `components/`
- **Screens**: Full screen components in `screens/`
- **Hooks**: Custom hooks in `hooks/`
- **Theme**: Design tokens in `themes/`
- **Types**: TypeScript interfaces in [types/index.ts](mdc:types/index.ts)

### Import Organization
```typescript
// ✅ Correct: Import order
// 1. React and React Native
import React from 'react';
import { View, StyleSheet } from 'react-native';

// 2. Third-party libraries
import { Card, Text } from 'react-native-paper';

// 3. Internal imports (with aliases)
import { Lead } from '@types/index';
import { useLeads } from '@hooks/api';
```

## Validation Checklist

Before submitting code, ensure:
- [ ] Uses React Native Paper components where applicable
- [ ] Follows 8pt grid spacing
- [ ] Implements proper loading/error/empty states
- [ ] Includes accessibility labels
- [ ] Uses theme colors and typography
- [ ] Optimizes performance for large datasets
- [ ] Follows established navigation patterns
